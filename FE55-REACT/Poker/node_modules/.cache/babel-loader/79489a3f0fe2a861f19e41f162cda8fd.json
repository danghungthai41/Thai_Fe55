{"ast":null,"code":"let initialState = {\n  playerList: [{\n    username: \"Player 1\",\n    email: \"player1@gmail.com\",\n    phone: \"1829839030\",\n    totalPoint: 25000,\n    cards: []\n  }, {\n    username: \"Player 2\",\n    email: \"player2@gmail.com\",\n    phone: \"8849839939\",\n    totalPoint: 25000,\n    cards: []\n  }, {\n    username: \"Player 3\",\n    email: \"player3@gmail.com\",\n    phone: \"894589485\",\n    totalPoint: 25000,\n    cards: []\n  }]\n};\n\nconst checkSpecialCase = cards => {\n  const specialCard = [\"KING\", \"JACK\", \"QUEEN\"];\n\n  for (let card of cards) {\n    if (!specialCard.includes(card.value)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst mapCardToPoint = card => {\n  const specialCard = [\"KING\", \"JACK\", \"QUEEN\"];\n  if (card.value === \"ACE\") return 1;\n  if (specialCard.includes(card.value)) return 10;\n  return +card.value;\n}; // const calcPoint = (winners) => {\n//   for(let player of )\n//   winners.includes(state.playerList);\n// }\n\n\nconst reducer = (state = initialState, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case \"ADD_PLAYER\":\n      state.playerList = [...state.playerList, payload];\n      return { ...state\n      };\n\n    case \"DRAW_CARD\":\n      const totalPlayer = state.playerList.length;\n      const clonePlayerList = [...state.playerList];\n\n      for (let index in payload) {\n        const playerIndex = index % totalPlayer;\n        clonePlayerList[playerIndex].cards.push(payload[index]);\n      }\n\n      return { ...state,\n        playerList: clonePlayerList\n      };\n\n    /*\r\n        logic tinh diem\r\n        1. check value\r\n        2. tinh diem\r\n          2.1. viết hàm chuyển đổi điểm\r\n          2.2. cộng điểm 3 lá % 10\r\n          2.3. Tìm max\r\n          2.4 Cộng cho max, trừ điểm player còn lại\r\n        */\n\n    case \"REVEAL_CARDS\":\n      {\n        const specialCase = [];\n        const max = 0;\n        const maxPlayers = [];\n        const clonePlayerList = [...state.playerList];\n\n        for (let player of clonePlayerList) {\n          if (checkSpecialCase(player.cards)) {\n            specialCase.push(player);\n          } else {\n            //High order function: reduce, map, find, findIndex\n            const totalPoint = player.cards.reduce((total, card) => {\n              total + mapCardToPoint(card.value);\n            }, 0);\n          }\n        }\n\n        if (totalPoint > max) {\n          max = totalPoint;\n          maxPlayers = [player];\n        } else if (totalPoint === max) {\n          maxPlayer.push(player);\n        }\n\n        const winners = specialCase ? specialCase : maxPlayers;\n        const winPoint = 20000 / winners.length - 5000;\n\n        for (let index in clonePlayerList) {\n          const foundedIndex = winners.find(winner => winner.username === clonePlayerList[index].username);\n\n          if (foundedIndex) {\n            clonePlayerList[i].totalPoint += winPoint;\n          } else {\n            clonePlayerList[i].totalPoint -= 5000;\n          }\n        }\n\n        return { ...state,\n          playerList: clonePlayerList\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer; // const totalPlayer = state.playerList.length;\n// const clonePlayerList = [...state.playerList];\n// for (let index in payload) {\n//   const playerIndex = index % totalPlayer;\n//   clonePlayerList[playerIndex].cards.push(payload[index]);\n// };\n// return {...state, playerList : clonePlayerList };","map":{"version":3,"sources":["/Users/mac/Desktop/FE55/FE55-REACT/Poker/src/redux/reducers/player.js"],"names":["initialState","playerList","username","email","phone","totalPoint","cards","checkSpecialCase","specialCard","card","includes","value","mapCardToPoint","reducer","state","type","payload","totalPlayer","length","clonePlayerList","index","playerIndex","push","specialCase","max","maxPlayers","player","reduce","total","maxPlayer","winners","winPoint","foundedIndex","find","winner","i"],"mappings":"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","sourcesContent":["let initialState = {\r\n  playerList: [\r\n    {\r\n      username: \"Player 1\",\r\n      email: \"player1@gmail.com\",\r\n      phone: \"1829839030\",\r\n      totalPoint: 25000,\r\n      cards: [],\r\n    },\r\n    {\r\n      username: \"Player 2\",\r\n      email: \"player2@gmail.com\",\r\n      phone: \"8849839939\",\r\n      totalPoint: 25000,\r\n      cards: [],\r\n    },\r\n    {\r\n      username: \"Player 3\",\r\n      email: \"player3@gmail.com\",\r\n      phone: \"894589485\",\r\n      totalPoint: 25000,\r\n      cards: [],\r\n    },\r\n  ],\r\n};\r\n\r\nconst checkSpecialCase = (cards) => {\r\n  const specialCard = [\"KING\", \"JACK\", \"QUEEN\"];\r\n  for (let card of cards) {\r\n    if (!specialCard.includes(card.value)) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\nconst mapCardToPoint = (card) => {\r\n  const specialCard = [\"KING\", \"JACK\", \"QUEEN\"];\r\n  if (card.value === \"ACE\") return 1;\r\n  if (specialCard.includes(card.value)) return 10;\r\n  return +card.value;\r\n};\r\n\r\n// const calcPoint = (winners) => {\r\n\r\n//   for(let player of )\r\n//   winners.includes(state.playerList);\r\n// }\r\n\r\nconst reducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case \"ADD_PLAYER\":\r\n      state.playerList = [...state.playerList, payload];\r\n      return { ...state };\r\n    case \"DRAW_CARD\":\r\n      const totalPlayer = state.playerList.length;\r\n      const clonePlayerList = [...state.playerList];\r\n      for (let index in payload) {\r\n        const playerIndex = index % totalPlayer;\r\n        clonePlayerList[playerIndex].cards.push(payload[index]);\r\n      }\r\n      return { ...state, playerList: clonePlayerList };\r\n\r\n    /*\r\n        logic tinh diem\r\n        1. check value\r\n        2. tinh diem\r\n          2.1. viết hàm chuyển đổi điểm\r\n          2.2. cộng điểm 3 lá % 10\r\n          2.3. Tìm max\r\n          2.4 Cộng cho max, trừ điểm player còn lại\r\n        */\r\n    case \"REVEAL_CARDS\": {\r\n      const specialCase = [];\r\n      const max = 0;\r\n      const maxPlayers = [];\r\n      const clonePlayerList = [...state.playerList];\r\n      for (let player of clonePlayerList) {\r\n        if (checkSpecialCase(player.cards)) {\r\n          specialCase.push(player);\r\n        } else {\r\n          //High order function: reduce, map, find, findIndex\r\n          const totalPoint = player.cards.reduce((total, card) => {\r\n            total + mapCardToPoint(card.value);\r\n          }, 0);\r\n        }\r\n      }\r\n      if (totalPoint > max) {\r\n        max = totalPoint;\r\n        maxPlayers = [player];\r\n      } else if (totalPoint === max) {\r\n        maxPlayer.push(player);\r\n      }\r\n\r\n      const winners = specialCase ? specialCase : maxPlayers;\r\n      const winPoint = 20000 / winners.length - 5000;\r\n      for (let index in clonePlayerList) {\r\n        const foundedIndex = winners.find(\r\n          (winner) => winner.username === clonePlayerList[index].username\r\n        );\r\n        if (foundedIndex) {\r\n          clonePlayerList[i].totalPoint += winPoint;\r\n        } else {\r\n          clonePlayerList[i].totalPoint -= 5000;\r\n        }\r\n      }\r\n      return {...state, playerList : clonePlayerList};\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n\r\n// const totalPlayer = state.playerList.length;\r\n// const clonePlayerList = [...state.playerList];\r\n// for (let index in payload) {\r\n\r\n//   const playerIndex = index % totalPlayer;\r\n//   clonePlayerList[playerIndex].cards.push(payload[index]);\r\n// };\r\n// return {...state, playerList : clonePlayerList };\r\n"]},"metadata":{},"sourceType":"module"}