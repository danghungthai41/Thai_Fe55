{"ast":null,"code":"let initialState = {\n  playerList: [{\n    username: \"Player 1\",\n    email: \"player1@gmail.com\",\n    phone: \"1829839030\",\n    totalPoint: 25000,\n    cards: []\n  }, {\n    username: \"Player 2\",\n    email: \"player2@gmail.com\",\n    phone: \"8849839939\",\n    totalPoint: 25000,\n    cards: []\n  }, {\n    username: \"Player 3\",\n    email: \"player3@gmail.com\",\n    phone: \"894589485\",\n    totalPoint: 25000,\n    cards: []\n  }]\n};\n\nconst reducer = (state = initialState, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case \"ADD_PLAYER\":\n      state.playerList = [...state.playerList, payload];\n      return { ...state\n      };\n\n    case \"DRAW_CARD\":\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n\nconst drawCard = () => {\n  const clonePlayList = [...state.playerList];\n\n  for (let index in payload) {\n    const playerIndex = index % clonePlayList.length;\n    clonePlayList[playerIndex].cards.push(payload[index]);\n  }\n};","map":{"version":3,"sources":["/Users/mac/Downloads/Poker/src/redux/reducers/player.js"],"names":["initialState","playerList","username","email","phone","totalPoint","cards","reducer","state","type","payload","drawCard","clonePlayList","index","playerIndex","length","push"],"mappings":"AAAA,IAAIA,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,CACV;AACEC,IAAAA,QAAQ,EAAE,UADZ;AAEEC,IAAAA,KAAK,EAAE,mBAFT;AAGEC,IAAAA,KAAK,EAAE,YAHT;AAIEC,IAAAA,UAAU,EAAE,KAJd;AAKEC,IAAAA,KAAK,EAAE;AALT,GADU,EAQV;AACEJ,IAAAA,QAAQ,EAAE,UADZ;AAEEC,IAAAA,KAAK,EAAE,mBAFT;AAGEC,IAAAA,KAAK,EAAE,YAHT;AAIEC,IAAAA,UAAU,EAAE,KAJd;AAKEC,IAAAA,KAAK,EAAE;AALT,GARU,EAeV;AACEJ,IAAAA,QAAQ,EAAE,UADZ;AAEEC,IAAAA,KAAK,EAAE,mBAFT;AAGEC,IAAAA,KAAK,EAAE,WAHT;AAIEC,IAAAA,UAAU,EAAE,KAJd;AAKEC,IAAAA,KAAK,EAAE;AALT,GAfU;AADK,CAAnB;;AA0BA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuB;AAAES,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAvB,KAA6C;AAC3D,UAAQD,IAAR;AACE,SAAK,YAAL;AACED,MAAAA,KAAK,CAACP,UAAN,GAAmB,CAAC,GAAGO,KAAK,CAACP,UAAV,EAAsBS,OAAtB,CAAnB;AACA,aAAO,EAAE,GAAGF;AAAL,OAAP;;AACF,SAAK,WAAL;AAEA;AACE,aAAOA,KAAP;AAPJ;AASD,CAVD;;AAYA,eAAeD,OAAf;;AAIA,MAAMI,QAAQ,GAAG,MAAM;AACrB,QAAMC,aAAa,GAAG,CAAC,GAAGJ,KAAK,CAACP,UAAV,CAAtB;;AACA,OAAI,IAAIY,KAAR,IAAiBH,OAAjB,EAAyB;AACvB,UAAMI,WAAW,GAAGD,KAAK,GAAGD,aAAa,CAACG,MAA1C;AACAH,IAAAA,aAAa,CAACE,WAAD,CAAb,CAA2BR,KAA3B,CAAiCU,IAAjC,CAAsCN,OAAO,CAACG,KAAD,CAA7C;AACD;AACF,CAND","sourcesContent":["let initialState = {\r\n  playerList: [\r\n    {\r\n      username: \"Player 1\",\r\n      email: \"player1@gmail.com\",\r\n      phone: \"1829839030\",\r\n      totalPoint: 25000,\r\n      cards: [],\r\n    },\r\n    {\r\n      username: \"Player 2\",\r\n      email: \"player2@gmail.com\",\r\n      phone: \"8849839939\",\r\n      totalPoint: 25000,\r\n      cards: [],\r\n    },\r\n    {\r\n      username: \"Player 3\",\r\n      email: \"player3@gmail.com\",\r\n      phone: \"894589485\",\r\n      totalPoint: 25000,\r\n      cards: [],\r\n    },\r\n  ],\r\n};\r\n\r\nconst reducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case \"ADD_PLAYER\":\r\n      state.playerList = [...state.playerList, payload];\r\n      return { ...state };\r\n    case \"DRAW_CARD\":\r\n     \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n\r\n\r\n\r\nconst drawCard = () => {\r\n  const clonePlayList = [...state.playerList];\r\n  for(let index in payload){\r\n    const playerIndex = index % clonePlayList.length;\r\n    clonePlayList[playerIndex].cards.push(payload[index]);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}