{"ast":null,"code":"import { GET_LIST_TICKET } from \"../constants/booking.constant\";\nconst initialState = {\n  chairList: []\n};\n\nconst bookingReducer = (state = initialState, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case GET_LIST_TICKET:\n      return { ...state,\n        chairList: payload.danhSachGhe\n      };\n\n    case \"CHOICE_CHAIR\":\n      {\n        const index = state.chairList.findIndex(chair => chair.maGhe === payload);\n\n        if (index !== -1) {\n          let currentChair = state.chairList[index];\n          let newChair = { ...currentChair,\n            dangChon: !currentChair.dangChon\n          };\n          state.chairList[index] = newChair;\n          return { ...state\n          };\n        }\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default bookingReducer;","map":{"version":3,"sources":["/Users/mac/Downloads/reactjs-booking-13/src/redux/reducers/booking.reducer.js"],"names":["GET_LIST_TICKET","initialState","chairList","bookingReducer","state","type","payload","danhSachGhe","index","findIndex","chair","maGhe","currentChair","newChair","dangChon"],"mappings":"AAAA,SAASA,eAAT,QAAgC,+BAAhC;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE;AADQ,CAArB;;AAGA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuB;AAAEI,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAvB,KAA6C;AAClE,UAAQD,IAAR;AACE,SAAKL,eAAL;AACE,aAAO,EAAE,GAAGI,KAAL;AAAYF,QAAAA,SAAS,EAAEI,OAAO,CAACC;AAA/B,OAAP;;AACF,SAAK,cAAL;AAAqB;AACnB,cAAMC,KAAK,GAAGJ,KAAK,CAACF,SAAN,CAAgBO,SAAhB,CACXC,KAAD,IAAWA,KAAK,CAACC,KAAN,KAAgBL,OADf,CAAd;;AAGA,YAAIE,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,cAAII,YAAY,GAAGR,KAAK,CAACF,SAAN,CAAgBM,KAAhB,CAAnB;AACA,cAAIK,QAAQ,GAAG,EAAE,GAAGD,YAAL;AAAmBE,YAAAA,QAAQ,EAAE,CAACF,YAAY,CAACE;AAA3C,WAAf;AACAV,UAAAA,KAAK,CAACF,SAAN,CAAgBM,KAAhB,IAAyBK,QAAzB;AACA,iBAAO,EAAE,GAAGT;AAAL,WAAP;AACD;AACF;;AACD;AACE,aAAOA,KAAP;AAfJ;AAiBD,CAlBD;;AAoBA,eAAeD,cAAf","sourcesContent":["import { GET_LIST_TICKET } from \"../constants/booking.constant\";\r\nconst initialState = {\r\n  chairList: [],\r\n};\r\nconst bookingReducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case GET_LIST_TICKET:\r\n      return { ...state, chairList: payload.danhSachGhe };\r\n    case \"CHOICE_CHAIR\": {\r\n      const index = state.chairList.findIndex(\r\n        (chair) => chair.maGhe === payload\r\n      );\r\n      if (index !== -1) {\r\n        let currentChair = state.chairList[index];\r\n        let newChair = { ...currentChair, dangChon: !currentChair.dangChon };\r\n        state.chairList[index] = newChair;\r\n        return { ...state };\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default bookingReducer;\r\n"]},"metadata":{},"sourceType":"module"}